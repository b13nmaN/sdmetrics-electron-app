import { useState, useEffect } from 'react'; // Added useEffect
import { TabsContent } from "@/components/ui/tabs";
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ZoomIn, ZoomOut, Move, Search, XCircle } from "lucide-react"; // Added XCircle
import GraphVisualization from "@/components/graph-visualization";
import FilteredGraphView from "@/components/FilteredGraphView"; // Import the new component
import XMIEditor from "@/components/xmi-editor";
import MetricsDisplay from "@/components/MetricsDisplay";

export function RightPanel({
  onNodeSelect,
  perspective,
  zoomLevel,
  handleZoomIn,
  handleZoomOut,
  xmiContent,
  filePath,
  setXmiContent,
  matrices,
  activeMatrixTab,
  jsonData
}) {
  const [graphSearchTermInput, setGraphSearchTermInput] = useState("");
  const [submittedGraphSearchTerm, setSubmittedGraphSearchTerm] = useState("");

  const handleGraphSearchSubmit = () => {
    setSubmittedGraphSearchTerm(graphSearchTermInput.trim());
    if (graphSearchTermInput.trim() === "") {
        // If search is cleared, ensure onNodeSelect is called with null
        // to clear the left panel if it was showing details for the searched node
        onNodeSelect(null);
    }
  };

  const handleGraphSearchKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleGraphSearchSubmit();
    }
  };

  const clearSearch = () => {
    setGraphSearchTermInput("");
    setSubmittedGraphSearchTerm("");
    onNodeSelect(null); // Clear selection in left panel
  };
  
  // Effect to clear submitted search when jsonData (main data source) changes
  useEffect(() => {
      clearSearch();
  }, [jsonData]);


  return (
    <div className="w-4/5 flex flex-col overflow-y-hidden">
      <TabsContent value="visualizations" className="flex-1 m-0 relative h-full overflow-y-hidden">
        {/* Floating Search Bar */}
        <div className="absolute top-4 left-1/2 transform -translate-x-1/2 flex items-center space-x-2 z-20 bg-white p-2 rounded-md shadow-lg border border-gray-200">
          <Input
            type="text"
            placeholder="Search node ID..."
            value={graphSearchTermInput}
            onChange={(e) => setGraphSearchTermInput(e.target.value)}
            onKeyPress={handleGraphSearchKeyPress}
            className="h-8 text-sm w-48 sm:w-64"
          />
          <Button variant="outline" size="icon" onClick={handleGraphSearchSubmit} className="h-8 w-8">
            <Search className="h-4 w-4" />
          </Button>
          {submittedGraphSearchTerm && (
            <Button variant="ghost" size="icon" onClick={clearSearch} className="h-8 w-8">
              <XCircle className="h-4 w-4 text-gray-500 hover:text-gray-700" />
            </Button>
          )}
        </div>

        {/* Zoom/Move buttons - only show if not in filtered view */}
        {!submittedGraphSearchTerm && (
          <div className="absolute top-4 right-4 flex space-x-2 z-10">
            <Button variant="outline" size="icon" onClick={handleZoomIn}>
              <ZoomIn className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="icon" onClick={handleZoomOut}>
              <ZoomOut className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="icon">
              <Move className="h-4 w-4" />
            </Button>
          </div>
        )}

        {/* Conditional Rendering of Graph View */}
        {submittedGraphSearchTerm ? (
          <FilteredGraphView
            matrices={matrices}
            jsonData={jsonData}
            onNodeSelect={onNodeSelect} // Pass this so left panel can be updated
            searchTerm={submittedGraphSearchTerm}
          />
        ) : (
          <GraphVisualization
            matrices={matrices}
            activeMatrixTab={activeMatrixTab} // GraphVisualization might still use this
            onNodeSelect={onNodeSelect}
            perspective={perspective}
            zoomLevel={zoomLevel} // Pass zoomLevel only to full view
            jsonData={jsonData}
            // searchTerm={""} // Pass empty or remove if GraphVisualization no longer handles search highlighting directly
          />
        )}
      </TabsContent>
      
      {/* Other TabsContent remain the same */}
      <TabsContent value="overview" className="flex-1 m-0 p-6 h-full overflow-auto">
        <Card>
          <CardHeader>
            <CardTitle>Project Overview</CardTitle>
            <CardDescription>
              This application visualizes class relationships from XMI files as directed graphs.
            </CardDescription>
          </CardHeader>
          <CardContent>
            <p>Use the Visualizations tab to explore the class relationships and metrics.</p>
            {matrices && activeMatrixTab && (
              <div className="mt-4">
                <h3 className="font-medium mb-2">Current Matrix: {activeMatrixTab.replace(/_/g, " ")}</h3>
                <p>This matrix represents relationships between software elements.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </TabsContent>
      
      <TabsContent value="metrics" className="flex-1 m-0 p-6 h-full overflow-auto">
        <MetricsDisplay matrices={matrices} activeMatrixTab={activeMatrixTab} />
      </TabsContent>
      
      <TabsContent value="editor" className="flex-1 m-0 h-full overflow-hidden">
        <XMIEditor xmiContent={xmiContent} filePath={filePath} setXmiContent={setXmiContent} />
      </TabsContent>
    </div>
  );
}